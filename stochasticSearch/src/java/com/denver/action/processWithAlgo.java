/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.denver.action;

import com.stochastic_search.controller.CandidateAssignment;
import com.stochastic_search.controller.CandidateSolution;
import com.stochastic_search.controller.GeneticAlgorithm;
import com.stochastic_search.controller.SimulatedAnnealing;
import com.stochastic_search.model.PreferenceTable;
import com.stochastic_search.model.StudentEntry;
import com.stochastic_search.model.Utility;
import com.stochastic_search.model.resultModel;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author Chathura Dananjaya Rupasinghe (14208554)
 */
@WebServlet(name = "processWithAlgo", urlPatterns = {"/processWithAlgo"})
public class processWithAlgo extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {

            String noOfpreference = request.getParameter("noOfpreference");

            String nu_of_times = request.getParameter("nu_of_times");

            String nu_of_ini_pop = request.getParameter("nu_of_ini_pop");
            String nu_of_gen = request.getParameter("nu_of_gen");
            String timeSA = "";
            String timeGA = "";
            PreferenceTable pt = Utility.insCheck.INSTANCE.getTable();
            if (pt == null) {
                request.getRequestDispatcher("index.jsp").include(request, response);
            }
            pt.fillPreferencesOfAll(Integer.parseInt(noOfpreference));
            CandidateSolution simulatedSol = new CandidateSolution(pt);
            CandidateSolution genaticSol = new CandidateSolution(pt);
            List<resultModel> initialSolution = new ArrayList<resultModel>();
            List<resultModel> resultList = new ArrayList<resultModel>();
            //Iterate the results generated by the algorithms to mapit for display purposeses
            for (StudentEntry se : pt.getAllStudentEntries()) {
                resultModel model = new resultModel();
                model.setStudent(se);
                model.setProject1(genaticSol.findAssignmentByStudent(se.getStudentName()));
                model.setProject2(simulatedSol.findAssignmentByStudent(se.getStudentName()));
                model.setDissapointment(se.getRanking(model.getProject1()));
                model.setDissapointment2(se.getRanking(model.getProject2()));
                if (se.getOrderedPreferences().subList(0, se.getNumberOfStatedPreferences()).indexOf(model.getProject1()) == -1) {
                    model.setProject1IsPreference(false);

                } else {
                    model.setProject1IsPreference(true);

                }
                if (se.getOrderedPreferences().subList(0, se.getNumberOfStatedPreferences()).indexOf(model.getProject2()) == -1) {
                    model.setProject2IsPreference(false);

                } else {
                    model.setProject2IsPreference(true);

                }

                initialSolution.add(model);
            }
            
            //setting necessery parameters
            request.setAttribute("initialSolution", initialSolution);//initial  Solution
            request.setAttribute("energyini", genaticSol.getEnergy());
            request.setAttribute("energyini2", simulatedSol.getEnergy());
            request.setAttribute("fitnessini", genaticSol.getFitness());
            if (request.getParameter("SA") != null) {
                Date time = new Date();
                SimulatedAnnealing sa = new SimulatedAnnealing(pt, Integer.parseInt(nu_of_times));
                simulatedSol = sa.anneal();
                timeSA = Utility.timeFormat(time, new Date());
            }

            if (request.getParameter("GA") != null) {
                Date time = new Date();
                GeneticAlgorithm geneticalgorithm = new GeneticAlgorithm(pt, Integer.parseInt(nu_of_ini_pop), Integer.parseInt(nu_of_gen));

                genaticSol = geneticalgorithm.populate();
                timeGA = Utility.timeFormat(time, new Date());
            }

            HashSet<String> pList = new HashSet<String>();
            //adding the penalty project list
            for (CandidateAssignment cs : genaticSol.getSolutionList()) {

                pList.add(cs.getProjectAssignment().peek());

            }

            for (StudentEntry s : pt.getAllStudentEntries()) {
                resultModel model = new resultModel();
                if (s.hasPreassignedProject()) {

                    model.setProject1(s.getPreAssignProject());
                    model.setStudent(s);

                } else {

                    model.setStudent(s);
                    model.setProject1(genaticSol.findAssignmentByStudent(s.getStudentName()));
                    
                    if (s.getOrderedPreferences().subList(0, s.getNumberOfStatedPreferences()).indexOf(model.getProject1()) == -1) {
                        model.setProject1IsPreference(false);

                    } else {
                        model.setProject1IsPreference(true);

                    }
                    model.setDissapointment(s.getRanking(genaticSol.findAssignmentByStudent(s.getStudentName())));
                    model.setProject2(simulatedSol.findAssignmentByStudent(s.getStudentName()));
                    model.setDissapointment2(s.getRanking(model.getProject2()));

                }
                resultList.add(model);
            }
            request.setAttribute("penaltiesGA", genaticSol.getPanelties());
            request.setAttribute("penaltiesSA", simulatedSol.getPanelties());
            request.setAttribute("energySA", simulatedSol.getEnergy());
            request.setAttribute("energyGA", genaticSol.getEnergy());
            request.setAttribute("fitnessGA", genaticSol.getFitness());
            request.setAttribute("entryList", resultList);
            request.setAttribute("timeSA", timeSA);
            request.setAttribute("timeGA", timeGA);
            request.setAttribute("allocations", pt.getAllStudentEntries());
            request.setAttribute("no_of_projects", Integer.parseInt(noOfpreference));
            request.getRequestDispatcher("/WEB-INF/pages/view_result.jsp").forward(request, response);

        } catch (Exception e) {
            e.printStackTrace();
//            request.getRequestDispatcher("/index.jsp").forward(request, response);

        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
